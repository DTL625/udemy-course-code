
# init-player
getErr = True;
while (getErr):
    p1 = 'x'
    # p1 = input("[Player1]Please pick a marker 'x' or 'o'")
    p1 = p1.lower()
    if p1 in 'xo':
        p2 = ('x', 'o')[p1 == 'x']
        player = {
            '1': {
                'name': 'player1',
                'symble':p1
            },
            '2':  {
                'name': 'player2',
                'symble':p2
            },
        }
        currentPlayer = player['1']
        getErr = False
        print(f'player1 is {p1} and player2 is {p2}');
print('player1 first...')

# init-board
board = {
    7 : '', 8 : '', 9 : '',
    4 : '', 5 : '', 6 : '',
    1 : '', 2 : '', 3 : '',
}

board_relation = {
    1: {
        '1': [2, 3], '2': [5, 9], '3': [4 ,7]
    },
    2: {
        '1':[1, 3], '2': [5, 8]
    },
    3: {
        '1':[1, 2], '2': [5, 7], '3': [6, 9]
    },
    4: {
        '1':[1, 7], '2': [5, 6]
    },
    5: {
       '1':[1, 9], '2': [2, 8], '3': [3, 7], '4': [4, 6]
    },
    6: {
        '1':[3, 9], '2': [4, 5]
    },
    7: {
        '1':[1,4], '2': [8, 9], '3': [5, 3]
    },
    8: {
        '1':[7, 9], '2': [2, 5]
    },
    9: {
        '1':[1,5], '2': [3, 6], '3': [7, 8]
    },
}

def display_board():
    global board
    print(f' {board[7]} ｜ {board[8]} ｜ {board[9]}')
    print('---------')
    print(f' {board[4]} ｜ {board[5]} ｜ {board[6]}')
    print('---------')
    print(f' {board[1]} ｜ {board[2]} ｜ {board[3]}')

def board_get_fail(newInput):
    global board
    if (board[newInput] == ''):
        is_fail = False;
    else:
        is_fail = True

    return is_fail;

def user_get_win(newInputNum, currentSymble):
    global board, board_relation;
    getEnd = False
    # 獲取要檢查的內容
    relations = board_relation[newInputNum];
    for (main_key, main_val) in relations.items():
        # print(main_val)
        successCnt = 0;
        for sub_rel in main_val:
            if (board[sub_rel] == ''):
                continue;
            if (board[sub_rel] == currentSymble):
                successCnt += 1;
        if (successCnt == 2):
            return True

    return False;

def change_player(currentPlayer):
    global player;
    return (player['1'], player['2']) [currentPlayer['name'] == player['1']['name']];


# display_board()
cnt = 9
while (cnt != 0):
    # print(currentPlayer)
    newInputNum = int(input(f"{currentPlayer['name']} enter a num(1-9)"))
    # check num
    if (newInputNum > 9) :
        print('number too big, please re try')
        continue;
    elif (newInputNum < 1) :
        print('number too small, please re try')
        continue;
    elif (board_get_fail(newInputNum)):
        print(f'board number {newInputNum} is not empty, please try other number');
        continue;
    else:
        board[newInputNum] = currentPlayer['symble']
        display_board()
        if (user_get_win(newInputNum, currentPlayer['symble'])):
            print(f"{currentPlayer['name']} win!!!");
            exit();
        else :
            currentPlayer = change_player(currentPlayer);
    # theEnd = True;
print(f"{currentPlayer['name']} win!!!");
